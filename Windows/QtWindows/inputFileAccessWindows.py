# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'inputFileAccessWindows.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_inputFileAccessWindows(object):
    def setupUi(self, inputFileAccessWindows):
        inputFileAccessWindows.setObjectName("inputFileAccessWindows")
        inputFileAccessWindows.setWindowModality(QtCore.Qt.NonModal)
        inputFileAccessWindows.resize(800, 600)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        inputFileAccessWindows.setFont(font)
        inputFileAccessWindows.setStyleSheet("background-color: rgb(212, 237, 255);")
        self.centralwidget = QtWidgets.QWidget(inputFileAccessWindows)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 800, 100))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("background-color: rgb(180, 197, 255);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.continueButton = QtWidgets.QPushButton(self.centralwidget)
        self.continueButton.setGeometry(QtCore.QRect(300, 350, 200, 50))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.continueButton.setFont(font)
        self.continueButton.setStyleSheet("background-color: rgb(180, 197, 255);")
        self.continueButton.setDefault(False)
        self.continueButton.setFlat(False)
        self.continueButton.setObjectName("continueButton")
        self.infoLabel = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel.setGeometry(QtCore.QRect(0, 200, 800, 60))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.infoLabel.setFont(font)
        self.infoLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.infoLabel.setAutoFillBackground(False)
        self.infoLabel.setStyleSheet("")
        self.infoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.infoLabel.setWordWrap(False)
        self.infoLabel.setObjectName("infoLabel")
        self.fileAccessComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.fileAccessComboBox.setGeometry(QtCore.QRect(200, 280, 400, 50))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(14)
        self.fileAccessComboBox.setFont(font)
        self.fileAccessComboBox.setObjectName("fileAccessComboBox")
        inputFileAccessWindows.setCentralWidget(self.centralwidget)

        from WorkWithDB import findAccessToInfo
        accessArr = findAccessToInfo()

        for i in range(len(accessArr)):
            self.fileAccessComboBox.addItem(accessArr[i][1])

        def continueCreateFile():
            for i in range(len(accessArr)):
                if self.fileAccessComboBox.currentText() == accessArr[i][1]:
                    from Windows.QtWindows.menuActionsWindow import showMenuActionsWindow
                    showMenuActionsWindow()
                    closeInputFileAccessWindows()
                    from WorkWithDB import fillDocumentToDB, findIDLastLoadDocument, fillDocAvailableUser
                    from Converter import convertFileToString, convertFileToRTF, deleteRTFFile
                    isDelete = False
                    for fName in fileName:
                        if fName[fName.rfind("."):] != ".rtf":
                            convertFileToRTF(fName)
                            isDelete = True
                            fName = fName[:fName.rfind(".")] + ".rtf"
                        fillDocumentToDB(idUser, fName, accessArr[i][0], 1,
                                         convertFileToString(fName).replace('\'', '"'), None)
                        fillDocAvailableUser(findIDLastLoadDocument(idUser)[0][0], idUser)
                        from Windows.QtWindows.errWindow import showErrWindow, editText
                        if isDelete:
                            deleteRTFFile(fName)
                        editText('Загрузка была проведена успешно!')
                        showErrWindow()

        self.continueButton.clicked.connect(continueCreateFile)

        self.retranslateUi(inputFileAccessWindows)
        QtCore.QMetaObject.connectSlotsByName(inputFileAccessWindows)

    def retranslateUi(self, inputFileAccessWindows):
        _translate = QtCore.QCoreApplication.translate
        inputFileAccessWindows.setWindowTitle(_translate("inputFileAccessWindows", "Experiment"))
        self.label.setText(_translate("inputFileAccessWindows", "Загрузка документа"))
        self.continueButton.setText(_translate("inputFileAccessWindows", "Продолжить"))
        self.infoLabel.setText(_translate("inputFileAccessWindows", "Выберете уровень допуска к файлу:"))


def showInputFileAccessWindows():
    global inputFileAccessWindows
    inputFileAccessWindows = QtWidgets.QMainWindow()
    ui = Ui_inputFileAccessWindows()
    ui.setupUi(inputFileAccessWindows)
    inputFileAccessWindows.show()


def closeInputFileAccessWindows():
    inputFileAccessWindows.close()


def editParamFileLoad(_idUser, _fileName):
    global idUser
    idUser = _idUser
    global fileName
    fileName = _fileName
