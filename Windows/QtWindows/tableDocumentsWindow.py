# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tableDocumentsWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QCheckBox, QHBoxLayout, QTableWidgetItem
from PyQt5.QtCore import Qt


class Ui_tableDocumentsWindow(object):
    def setupUi(self, tableDocumentsWindow):
        tableDocumentsWindow.setObjectName("tableDocumentsWindow")
        tableDocumentsWindow.setWindowModality(QtCore.Qt.NonModal)
        tableDocumentsWindow.resize(788, 600)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        tableDocumentsWindow.setFont(font)
        tableDocumentsWindow.setStyleSheet("background-color: rgb(212, 237, 255);")
        self.centralwidget = QtWidgets.QWidget(tableDocumentsWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.hiLabel = QtWidgets.QLabel(self.centralwidget)
        self.hiLabel.setGeometry(QtCore.QRect(0, 0, 800, 100))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.hiLabel.setFont(font)
        self.hiLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.hiLabel.setAutoFillBackground(False)
        self.hiLabel.setStyleSheet("background-color: rgb(180, 197, 255);")
        self.hiLabel.setText("")
        self.hiLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.hiLabel.setWordWrap(True)
        self.hiLabel.setObjectName("hiLabel")
        self.continueButton = QtWidgets.QPushButton(self.centralwidget)
        self.continueButton.setGeometry(QtCore.QRect(300, 540, 200, 50))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.continueButton.setFont(font)
        self.continueButton.setStyleSheet("background-color: rgb(180, 197, 255);")
        self.continueButton.setDefault(False)
        self.continueButton.setFlat(False)
        self.continueButton.setObjectName("continueButton")
        self.infoLabel = QtWidgets.QLabel(self.centralwidget)
        self.infoLabel.setGeometry(QtCore.QRect(0, 110, 800, 60))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.infoLabel.setFont(font)
        self.infoLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.infoLabel.setAutoFillBackground(False)
        self.infoLabel.setStyleSheet("")
        self.infoLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.infoLabel.setWordWrap(False)
        self.infoLabel.setObjectName("infoLabel")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 170, 791, 361))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(16)
        self.tab.setFont(font)
        self.tab.setObjectName("tab")
        self.tableCreateDocumentWidget = QtWidgets.QTableWidget(self.tab)
        self.tableCreateDocumentWidget.setGeometry(QtCore.QRect(0, 0, 781, 331))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(14)
        self.tableCreateDocumentWidget.setFont(font)
        self.tableCreateDocumentWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableCreateDocumentWidget.setObjectName("tableCreateDocumentWidget")
        self.tableCreateDocumentWidget.setColumnCount(0)
        self.tableCreateDocumentWidget.setRowCount(0)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableAvailableDocumentWidget = QtWidgets.QTableWidget(self.tab_2)
        self.tableAvailableDocumentWidget.setGeometry(QtCore.QRect(0, 0, 781, 331))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(14)
        self.tableAvailableDocumentWidget.setFont(font)
        self.tableAvailableDocumentWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableAvailableDocumentWidget.setObjectName("tableAvailableDocumentWidget")
        self.tableAvailableDocumentWidget.setColumnCount(0)
        self.tableAvailableDocumentWidget.setRowCount(0)
        self.tabWidget.addTab(self.tab_2, "")
        tableDocumentsWindow.setCentralWidget(self.centralwidget)

        self.hiLabel.setText(nameUser)

        self.tableCreateDocumentWidget.setRowCount(len(userDoc))
        self.tableCreateDocumentWidget.setColumnCount(3)
        self.tableCreateDocumentWidget.setHorizontalHeaderLabels(('Добавить?', 'Название документа', 'Дата загрузки'))
        self.tableCreateDocumentWidget.setColumnWidth(0, 100)
        self.tableCreateDocumentWidget.setColumnWidth(1, 479)
        self.tableCreateDocumentWidget.setColumnWidth(2, 300)
        for i in range(len(userDoc)):
            widget = QWidget()
            checkbox = QCheckBox()
            checkbox.setCheckState(Qt.Unchecked)
            layoutH = QHBoxLayout(widget)
            layoutH.addWidget(checkbox)
            layoutH.setAlignment(Qt.AlignCenter)
            layoutH.setContentsMargins(0, 0, 0, 0)
            self.tableCreateDocumentWidget.setCellWidget(i, 0, widget)
            self.tableCreateDocumentWidget.setItem(i, 1, QTableWidgetItem(userDoc[i][1]))
            self.tableCreateDocumentWidget.setItem(i, 2, QTableWidgetItem(str(userDoc[i][2])))

        self.tableAvailableDocumentWidget.setRowCount(len(availableDoc))
        self.tableAvailableDocumentWidget.setColumnCount(4)
        self.tableAvailableDocumentWidget.setHorizontalHeaderLabels(('Добавить?', 'Название документа',
                                                                     'Автор документа', 'Дата загрузки'))
        self.tableAvailableDocumentWidget.setColumnWidth(0, 100)
        self.tableAvailableDocumentWidget.setColumnWidth(1, 479)
        self.tableAvailableDocumentWidget.setColumnWidth(2, 250)
        self.tableAvailableDocumentWidget.setColumnWidth(3, 300)
        for i in range(len(availableDoc)):
            widget = QWidget()
            checkbox = QCheckBox()
            checkbox.setCheckState(Qt.Unchecked)
            layoutH = QHBoxLayout(widget)
            layoutH.addWidget(checkbox)
            layoutH.setAlignment(Qt.AlignCenter)
            layoutH.setContentsMargins(0, 0, 0, 0)
            self.tableAvailableDocumentWidget.setCellWidget(i, 0, widget)
            self.tableAvailableDocumentWidget.setItem(i, 1, QTableWidgetItem(availableDoc[i][1]))
            self.tableAvailableDocumentWidget.setItem(i, 2, QTableWidgetItem(availableDoc[i][2]))
            self.tableAvailableDocumentWidget.setItem(i, 3, QTableWidgetItem(str(availableDoc[i][3])))

        def clickedContinueButton():
            checkedList = []
            if self.tabWidget.currentWidget() == self.tab:
                for i in range(self.tableCreateDocumentWidget.rowCount()):
                    if self.tableCreateDocumentWidget.cellWidget(i, 0).findChild(type(QCheckBox())).isChecked():
                        checkedList.append(userDoc[i][0])
            if self.tabWidget.currentWidget() == self.tab_2:
                for i in range(self.tableAvailableDocumentWidget.rowCount()):
                    if self.tableAvailableDocumentWidget.cellWidget(i, 0).findChild(type(QCheckBox())).isChecked():
                        checkedList.append(availableDoc[i][0])
            testCheckedList(checkedList)

        self.continueButton.clicked.connect(clickedContinueButton)

        self.retranslateUi(tableDocumentsWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(tableDocumentsWindow)

    def retranslateUi(self, tableDocumentsWindow):
        _translate = QtCore.QCoreApplication.translate
        tableDocumentsWindow.setWindowTitle(_translate("tableDocumentsWindow", "Experiment"))
        self.continueButton.setText(_translate("tableDocumentsWindow", "Продолжить"))
        self.infoLabel.setText(_translate("tableDocumentsWindow", "Выберите документы для загрузки:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("tableDocumentsWindow", "Загружены вами"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("tableDocumentsWindow", "Доступные вам"))


def showTableDocumentsWindow():
    global tableDocumentsWindow
    tableDocumentsWindow = QtWidgets.QMainWindow()
    ui = Ui_tableDocumentsWindow()
    ui.setupUi(tableDocumentsWindow)
    tableDocumentsWindow.show()


def closeTableDocumentsWindow():
    tableDocumentsWindow.close()


def editNameUser(text):
    global nameUser
    nameUser = text


def editDocuments(_userDoc, _availableDoc):
    global userDoc
    userDoc = _userDoc
    global availableDoc
    availableDoc = _availableDoc


def testCheckedList(checkedList):
    if len(checkedList) > 0:
        from InputTest import getDocumentsCheckedList, editIsUploadFile
        editIsUploadFile(True)
        getDocumentsCheckedList(checkedList)
        from Windows.QtWindows.tableExtensionWindow import showTableExtensionWindow, editFileExtension
        from WorkWithDB import findFileExtension
        editFileExtension(findFileExtension())
        showTableExtensionWindow()
        closeTableDocumentsWindow()
    else:
        from Windows.QtWindows.errWindow import editText
        editText('Ошибка! Вы не выбрали ни одного документа')
